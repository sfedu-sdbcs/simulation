require 'msg/Odometry'
require 'msg/Vector3'
require 'msg/Point'
require 'msg/Quaternion'

function sysCall_init()
    objectHandle=sim.getObjectAssociatedWithScript(sim.handle_self)
    lidarHandler = sim.getObjectHandle('velodyneHDL_64E_S2')
    baseLinkHandler = sim.getObjectHandle('Summit_XL_visible')
    objectName=sim.getObjectName(objectHandle)
    rosInterfacePresent=simROS
    if rosInterfacePresent then
        publisherOdometry = simROS.advertise("/sim_ros_interface/odometry","nav_msgs/Odometry",10)
    end
    
end

function sysCall_actuation()

    if rosInterfacePresent then
      
      local pos = sim.getObjectPosition(objectHandle,-1)
      local orient = sim.getObjectQuaternion(objectHandle,-1)
      local lin,ang = sim.getObjectVelocity(objectHandle)
      
      
      local lidarPos = sim.getObjectPosition(lidarHandler,objectHandle)
      local lidarRot = sim.getObjectQuaternion(lidarHandler,objectHandle)
      
       simROS.publish(publisherOdometry,{
                header=createHeader(simROS.getTime(),'world'),
                child_frame_id='odom',
                pose={
                    pose={
                        position=createPoint(pos[1],pos[2],pos[3]),
                        orientation=createQuaternion(orient[1],orient[2],orient[3],orient[4])
                    },
                    covariance={}
                },
                twist={
                    twist={            
                        linear=createVector3(lin[1],lin[2],lin[3]),
                        angular=createVector3(ang[1],ang[2],ang[3]),
                    },
                    covariance={}
                }
       })
       
        simROS.sendTransform({
                header=createHeader(simROS.getTime(),'world'),
                child_frame_id='base_link',
                transform={
                    translation = {x=pos[1],y=pos[2],z=pos[3]},
                    rotation = {x=orient[1],y=orient[2],z=orient[3],w=orient[4]}
                }
            })
        
    end
   
end

function sysCall_sensing()
    -- put your sensing code here
end

function sysCall_cleanup()
    if rosInterfacePresent then
        simROS.shutdownPublisher(publisher)
    end
end

